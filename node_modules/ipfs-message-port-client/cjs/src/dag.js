'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var client = require('./client.js');
var cid = require('ipfs-message-port-protocol/cid');
var dag = require('ipfs-message-port-protocol/dag');

class DAGClient extends client.Client {
  constructor(transport) {
    super('dag', [
      'put',
      'get',
      'resolve'
    ], transport);
  }
}
DAGClient.prototype.put = async function put(dagNode, options = {}) {
  const encodedCID = await this.remote.put({
    ...options,
    dagNode: dag.encodeNode(dagNode, options.transfer)
  });
  return cid.decodeCID(encodedCID);
};
DAGClient.prototype.get = async function get(cid$1, options = {}) {
  const {value, remainderPath} = await this.remote.get({
    ...options,
    cid: cid.encodeCID(cid$1, options.transfer)
  });
  return {
    value: dag.decodeNode(value),
    remainderPath
  };
};
DAGClient.prototype.resolve = async function resolve(cid$1, options = {}) {
  const {
    cid: encodedCID,
    remainderPath
  } = await this.remote.resolve({
    ...options,
    cid: encodeCIDOrPath(cid$1, options.transfer)
  });
  return {
    cid: cid.decodeCID(encodedCID),
    remainderPath
  };
};
const encodeCIDOrPath = (input, transfer) => {
  if (typeof input === 'string') {
    return input;
  } else {
    return cid.encodeCID(input, transfer);
  }
};

exports.DAGClient = DAGClient;
