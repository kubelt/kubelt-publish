import { Client } from './client.js';
import {
  encodeCID,
  decodeCID
} from 'ipfs-message-port-protocol/cid';
import {
  encodeNode,
  decodeNode
} from 'ipfs-message-port-protocol/dag';
export class DAGClient extends Client {
  constructor(transport) {
    super('dag', [
      'put',
      'get',
      'resolve'
    ], transport);
  }
}
DAGClient.prototype.put = async function put(dagNode, options = {}) {
  const encodedCID = await this.remote.put({
    ...options,
    dagNode: encodeNode(dagNode, options.transfer)
  });
  return decodeCID(encodedCID);
};
DAGClient.prototype.get = async function get(cid, options = {}) {
  const {value, remainderPath} = await this.remote.get({
    ...options,
    cid: encodeCID(cid, options.transfer)
  });
  return {
    value: decodeNode(value),
    remainderPath
  };
};
DAGClient.prototype.resolve = async function resolve(cid, options = {}) {
  const {
    cid: encodedCID,
    remainderPath
  } = await this.remote.resolve({
    ...options,
    cid: encodeCIDOrPath(cid, options.transfer)
  });
  return {
    cid: decodeCID(encodedCID),
    remainderPath
  };
};
const encodeCIDOrPath = (input, transfer) => {
  if (typeof input === 'string') {
    return input;
  } else {
    return encodeCID(input, transfer);
  }
};