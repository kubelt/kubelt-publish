/**
 * @template T
 * @typedef {import('ipfs-message-port-protocol/src/core').RemoteIterable<T>} RemoteIterable
 */
/**
 * @typedef {import('ipfs-message-port-protocol/src/cid').EncodedCID} EncodedCID
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedAddInput} EncodedAddInput
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedAddAllInput} EncodedAddAllInput
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedAddResult} EncodedAddResult
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedIPFSEntry} EncodedIPFSEntry
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedFileInput} EncodedFileInput
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedFileContent} EncodedFileContent
 * @typedef {import('ipfs-message-port-protocol/src/root').EncodedDirectoryInput} EncodedDirectoryInput
 *
 * @typedef {import('ipfs-message-port-server').CoreService} CoreService
 *
 * @typedef {import('./client').MessageTransport} MessageTransport
 * @typedef {import('./interface').MessagePortClientOptions} MessagePortClientOptions
 * @typedef {import('ipfs-core-types/src/root').API<MessagePortClientOptions>} RootAPI
 *
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate
 * @typedef {import('ipfs-core-types/src/utils').ToFile} ToFile
 * @typedef {import('ipfs-core-types/src/utils').ToDirectory} ToDirectory
 * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream
 */
/**
 * @class
 * @extends {Client<CoreService>}
 */
export class CoreClient extends Client<import("ipfs-message-port-server").CoreService> {
    /**
     * @param {MessageTransport} transport
     */
    constructor(transport: MessageTransport);
    addAll(source: import("ipfs-core-types/src/utils").ImportCandidateStream, options?: (import("ipfs-core-types/src/root").AddAllOptions & import("ipfs-core-types/src/utils").AbortOptions & import("./interface").MessagePortClientOptions) | undefined): AsyncIterable<import("ipfs-core-types/src/root").AddResult>;
    add(entry: import("ipfs-core-types/src/utils").ImportCandidate, options?: (import("ipfs-core-types/src/root").AddOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("ipfs-core-types/src/root").AddResult>;
    cat(ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: (import("ipfs-core-types/src/root").CatOptions & import("./interface").MessagePortClientOptions) | undefined): AsyncIterable<Uint8Array>;
    ls(ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: (import("ipfs-core-types/src/root").ListOptions & import("./interface").MessagePortClientOptions) | undefined): AsyncIterable<import("ipfs-core-types/src/root").IPFSEntry>;
}
export type RemoteIterable<T> = import('ipfs-message-port-protocol/src/core').RemoteIterable<T>;
export type EncodedCID = import('ipfs-message-port-protocol/src/cid').EncodedCID;
export type EncodedAddInput = import('ipfs-message-port-protocol/src/root').EncodedAddInput;
export type EncodedAddAllInput = import('ipfs-message-port-protocol/src/root').EncodedAddAllInput;
export type EncodedAddResult = import('ipfs-message-port-protocol/src/root').EncodedAddResult;
export type EncodedIPFSEntry = import('ipfs-message-port-protocol/src/root').EncodedIPFSEntry;
export type EncodedFileInput = import('ipfs-message-port-protocol/src/root').EncodedFileInput;
export type EncodedFileContent = import('ipfs-message-port-protocol/src/root').EncodedFileContent;
export type EncodedDirectoryInput = import('ipfs-message-port-protocol/src/root').EncodedDirectoryInput;
export type CoreService = import('ipfs-message-port-server').CoreService;
export type MessageTransport = import('./client').MessageTransport;
export type MessagePortClientOptions = import('./interface').MessagePortClientOptions;
export type RootAPI = import('ipfs-core-types/src/root').API<MessagePortClientOptions>;
export type ImportCandidate = import('ipfs-core-types/src/utils').ImportCandidate;
export type ToFile = import('ipfs-core-types/src/utils').ToFile;
export type ToDirectory = import('ipfs-core-types/src/utils').ToDirectory;
export type ToContent = import('ipfs-core-types/src/utils').ToContent;
export type ImportCandidateStream = import('ipfs-core-types/src/utils').ImportCandidateStream;
import { Client } from "./client.js";
//# sourceMappingURL=core.d.ts.map