/**
 * @typedef {import('ipfs-message-port-server').FilesService} FilesService
 * @typedef {import('ipfs-message-port-protocol/src/files').EncodedStat} EncodedStat
 * @typedef {import('./client').MessageTransport} MessageTransport
 * @typedef {import('./interface').MessagePortClientOptions} MessagePortClientOptions
 * @typedef {import('ipfs-core-types/src/files').API<MessagePortClientOptions>} FilesAPI
 */
/**
 * @class
 * @extends {Client<FilesService>}
 */
export class FilesClient extends Client<import("ipfs-message-port-server").FilesService> {
    /**
     * @param {MessageTransport} transport
     */
    constructor(transport: MessageTransport);
    stat(ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: (import("ipfs-core-types/src/files").StatOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("ipfs-core-types/src/files").StatResult>;
}
export type FilesService = import('ipfs-message-port-server').FilesService;
export type EncodedStat = import('ipfs-message-port-protocol/src/files').EncodedStat;
export type MessageTransport = import('./client').MessageTransport;
export type MessagePortClientOptions = import('./interface').MessagePortClientOptions;
export type FilesAPI = import('ipfs-core-types/src/files').API<MessagePortClientOptions>;
import { Client } from "./client.js";
//# sourceMappingURL=files.d.ts.map