/**
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('ipfs-message-port-protocol/src/cid').EncodedCID} EncodedCID
 * @typedef {import('ipfs-message-port-server').DAGService} DagService
 * @typedef {import('./client').MessageTransport} MessageTransport
 * @typedef {import('./interface').MessagePortClientOptions} MessagePortClientOptions
 * @typedef {import('ipfs-core-types/src/dag').API<MessagePortClientOptions>} DAGAPI
 */
/**
 * @class
 * @extends {Client<DagService>}
 */
export class DAGClient extends Client<import("ipfs-message-port-server").DAGService> {
    /**
     * @param {MessageTransport} transport
     */
    constructor(transport: MessageTransport);
    put(node: any, options?: (import("ipfs-core-types/src/dag").PutOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("multiformats/cid").CID>;
    get(cid: import("multiformats/cid").CID, options?: (import("ipfs-core-types/src/dag").GetOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("ipfs-core-types/src/dag").GetResult>;
    resolve(ipfsPath: import("ipfs-core-types/src/utils").IPFSPath, options?: (import("ipfs-core-types/src/dag").ResolveOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("ipfs-core-types/src/dag").ResolveResult>;
}
export type CID = import('multiformats/cid').CID;
export type EncodedCID = import('ipfs-message-port-protocol/src/cid').EncodedCID;
export type DagService = import('ipfs-message-port-server').DAGService;
export type MessageTransport = import('./client').MessageTransport;
export type MessagePortClientOptions = import('./interface').MessagePortClientOptions;
export type DAGAPI = import('ipfs-core-types/src/dag').API<MessagePortClientOptions>;
import { Client } from "./client.js";
//# sourceMappingURL=dag.d.ts.map