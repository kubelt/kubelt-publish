/**
 * @typedef {import('./transport').MessageTransport} MessageTransport
 */
/**
 * @template T
 * @typedef {import('ipfs-message-port-protocol/src/rpc').ProcedureNames<T>} ProcedureNames
 */
/**
 * Service represents an API to a remote service `T`. It will have all the
 * methods with the same signatures as `T`.
 *
 * @template T
 */
export class Service<T> {
    /**
     * @param {string} namespace - Namespace that remote API is served under.
     * @param {ProcedureNames<T>} methods - Method names of the remote API.
     * @param {MessageTransport} transport - Transport to issue queries over.
     */
    constructor(namespace: string, methods: ProcedureNames<T>, transport: MessageTransport);
    transport: import("./transport").MessageTransport;
}
export type MessageTransport = import('./transport').MessageTransport;
export type ProcedureNames<T> = import('ipfs-message-port-protocol/src/rpc').ProcedureNames<T>;
//# sourceMappingURL=service.d.ts.map