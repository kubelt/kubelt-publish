/**
 * @typedef {Object} QueryOptions
 * @property {AbortSignal} [signal]
 * @property {number} [timeout]
 * @property {Set<Transferable>} [transfer]
 */
/**
 * @template I
 * @typedef {I & QueryOptions} QueryInput
 */
/**
 * Represents server query, encapsulating inputs to the server endpoint and
 * promise of it's result.
 *
 * @template I,O
 */
export class Query<I, O> {
    /**
     * @param {string} namespace - component namespace on the server.
     * @param {string} method - remote method this is a query of.
     * @param {QueryInput<I>} input - query input.
     */
    constructor(namespace: string, method: string, input: QueryInput<I>);
    /** @type {Promise<O>} */
    result: Promise<O>;
    succeed: (value: O | PromiseLike<O>) => void;
    fail: (reason?: any) => void;
    signal: AbortSignal | undefined;
    input: QueryInput<I>;
    namespace: string;
    method: string;
    timeout: number;
    /** @type {ReturnType<typeof setTimeout> | null} */
    timerID: ReturnType<typeof setTimeout> | null;
    /**
     * Data that will be structure cloned over message channel.
     *
     * @returns {Object}
     */
    toJSON(): Object;
    /**
     * Data that will be transferred over message channel.
     *
     * @returns {Set<Transferable>|void}
     */
    transfer(): Set<Transferable> | void;
}
export type QueryOptions = {
    signal?: AbortSignal | undefined;
    timeout?: number | undefined;
    transfer?: Set<Transferable> | undefined;
};
export type QueryInput<I> = I & QueryOptions;
//# sourceMappingURL=query.d.ts.map