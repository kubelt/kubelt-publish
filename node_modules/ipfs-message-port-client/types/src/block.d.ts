/**
 * @typedef {import('./client').MessageTransport} MessageTransport
 * @typedef {import('ipfs-message-port-server').BlockService} BlockService
 * @typedef {import('./interface').MessagePortClientOptions} MessagePortClientOptions
 * @typedef {import('ipfs-core-types/src/block').API<MessagePortClientOptions>} BlockAPI
 */
/**
 * @class
 * @extends {Client<BlockService>}
 */
export class BlockClient extends Client<import("ipfs-message-port-server").BlockService> {
    /**
     * @param {MessageTransport} transport
     */
    constructor(transport: MessageTransport);
    get(cid: import("multiformats/cid").CID, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<Uint8Array>;
    put(block: Uint8Array, options?: (import("ipfs-core-types/src/block").PutOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("multiformats/cid").CID>;
    rm(cid: import("multiformats/cid").CID | import("multiformats/cid").CID[], options?: (import("ipfs-core-types/src/block").RmOptions & import("./interface").MessagePortClientOptions) | undefined): AsyncIterable<import("ipfs-core-types/src/block").RmResult>;
    stat(cid: import("multiformats/cid").CID, options?: (import("ipfs-core-types/src/utils").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("./interface").MessagePortClientOptions) | undefined): Promise<import("ipfs-core-types/src/block").StatResult>;
}
export type MessageTransport = import('./client').MessageTransport;
export type BlockService = import('ipfs-message-port-server').BlockService;
export type MessagePortClientOptions = import('./interface').MessagePortClientOptions;
export type BlockAPI = import('ipfs-core-types/src/block').API<MessagePortClientOptions>;
import { Client } from "./client.js";
//# sourceMappingURL=block.d.ts.map