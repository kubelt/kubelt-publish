"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleQueryStream = exports.handleQuery = void 0;
const types_1 = require("../types");
const handleQuery = async (store, query) => {
    const results = await store.comunica.query(query, { source: store });
    switch (results.type) {
        case 'boolean':
            return {
                type: types_1.ResultType.BOOLEAN,
                value: (await results.booleanResult),
            };
        case 'bindings':
            return {
                type: types_1.ResultType.BINDINGS,
                items: (await results.bindings()).map(binding => binding.toObject()),
                variables: results.variables,
            };
        case 'quads':
            return {
                type: types_1.ResultType.QUADS,
                items: await results.quads(),
            };
        default:
            throw new Error(`The Comunica engine returned results of unsupported type "${results.type}"`);
    }
};
exports.handleQuery = handleQuery;
const handleQueryStream = async (store, query) => {
    const results = await store.comunica.query(query, { source: store });
    switch (results.type) {
        case 'boolean':
            return {
                type: types_1.ResultType.BOOLEAN,
                value: (await results.booleanResult),
            };
        case 'bindings':
            return {
                type: types_1.ResultType.BINDINGS,
                iterator: results.bindingsStream.map(binding => binding.toObject()),
                variables: results.variables,
            };
        case 'quads':
            return {
                type: types_1.ResultType.QUADS,
                iterator: results.quadStream,
            };
        default:
            throw new Error(`The Comunica engine returned results of unsupported type "${results.type}"`);
    }
};
exports.handleQueryStream = handleQueryStream;
//# sourceMappingURL=comunica.js.map