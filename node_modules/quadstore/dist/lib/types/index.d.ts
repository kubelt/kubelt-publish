/// <reference types="node" />
import type { Readable } from 'stream';
import type { AbstractChainedBatch, AbstractLevelDOWN } from 'abstract-leveldown';
import type { AsyncIterator } from 'asynciterator';
import type { Literal, DataFactory, Quad_Subject, Quad_Predicate, Quad_Object, Quad_Graph, Quad, Term } from 'rdf-js';
import type { Scope } from '../scope';
import type { IQueryEngine } from '@comunica/types';
export interface BatchOpts {
    preWrite?: (batch: AbstractChainedBatch) => Promise<any> | any;
}
export interface DelOpts extends BatchOpts {
}
export interface PutOpts extends BatchOpts {
    scope?: Scope;
}
export interface PatchOpts extends BatchOpts {
}
export declare type TermName = 'subject' | 'predicate' | 'object' | 'graph';
export declare type TSReadable<T> = Readable | AsyncIterator<T>;
export declare enum ResultType {
    VOID = "void",
    QUADS = "quads",
    BOOLEAN = "boolean",
    BINDINGS = "bindings",
    APPROXIMATE_SIZE = "approximate_size"
}
export interface InternalIndex {
    terms: TermName[];
    prefix: string;
}
export interface ApproximateSizeResult {
    type: ResultType.APPROXIMATE_SIZE;
    approximateSize: number;
}
export interface GetOpts {
    limit?: number;
    offset?: number;
}
export interface PutStreamOpts {
    batchSize?: number;
    scope?: Scope;
}
export interface DelStreamOpts {
    batchSize?: number;
}
export { Quad };
export interface Range {
    termType: 'Range';
    lt?: Literal;
    lte?: Literal;
    gt?: Literal;
    gte?: Literal;
}
export interface Pattern {
    subject?: Quad_Subject;
    predicate?: Quad_Predicate;
    object?: Quad_Object | Range;
    graph?: Quad_Graph;
}
export interface Binding {
    [key: string]: Term;
}
export interface QuadArrayResult {
    type: ResultType.QUADS;
    items: Quad[];
}
export interface QuadStreamResult {
    type: ResultType.QUADS;
    iterator: AsyncIterator<Quad>;
}
export interface BindingArrayResult {
    type: ResultType.BINDINGS;
    items: Binding[];
    variables: string[];
}
export interface BindingStreamResult {
    type: ResultType.BINDINGS;
    iterator: AsyncIterator<Binding>;
    variables: string[];
}
export interface VoidResult {
    type: ResultType.VOID;
}
export interface BooleanResult {
    type: ResultType.BOOLEAN;
    value: boolean;
}
export interface Prefixes {
    expandTerm(term: string): string;
    compactIri(iri: string): string;
}
export interface StoreOpts {
    backend: AbstractLevelDOWN;
    prefixes?: Prefixes;
    indexes?: TermName[][];
    comunica?: IQueryEngine;
    dataFactory: DataFactory;
}
export interface SparqlOpts {
    baseIRI?: string;
}
