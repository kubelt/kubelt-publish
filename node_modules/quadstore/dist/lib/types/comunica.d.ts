import type * as RDF from 'rdf-js';
import { Algebra } from 'sparqlalgebrajs';
import { AsyncIterator } from 'asynciterator';
interface ComunicaMap<K extends string, V> {
    get(key: K): V;
    toObject(): Record<K, V>;
}
declare type ComunicaBindings = ComunicaMap<string, RDF.Term>;
declare type ComunicaBindingsStream = AsyncIterator<ComunicaBindings>;
interface ComunicaActorQueryOperationOutputBase {
    type: string;
    metadata?: () => Promise<Record<string, any>>;
}
interface ComunicaQueryResultBindings extends ComunicaActorQueryOperationOutputBase {
    type: 'bindings';
    bindingsStream: ComunicaBindingsStream;
    variables: string[];
    canContainUndefs: boolean;
    bindings: () => Promise<ComunicaBindings[]>;
}
interface ComunicaQueryResultQuads extends ComunicaActorQueryOperationOutputBase {
    type: 'quads';
    quadStream: RDF.Stream & AsyncIterator<RDF.Quad>;
    quads: () => Promise<RDF.Quad[]>;
}
interface ComunicaQueryResultBoolean extends ComunicaActorQueryOperationOutputBase {
    type: 'boolean';
    booleanResult: Promise<boolean>;
}
declare type ComunicaQueryResult = ComunicaQueryResultBindings | ComunicaQueryResultQuads | ComunicaQueryResultBoolean;
export interface ComunicaActorInitSparql {
    query(query: string | Algebra.Operation, context?: any): Promise<ComunicaQueryResult>;
}
export {};
