"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultGraphReader = exports.defaultGraphWriter = exports.numericLiteralReader = exports.numericLiteralWriter = exports.langStringLiteralReader = exports.langStringLiteralWriter = exports.stringLiteralReader = exports.stringLiteralWriter = exports.genericLiteralReader = exports.genericLiteralWriter = exports.blankNodeReader = exports.blankNodeWriter = exports.namedNodeReader = exports.namedNodeWriter = void 0;
const utils_1 = require("./utils");
exports.namedNodeWriter = {
    writtenValueBytes: 2,
    write(value, valueOffset, node, prefixes) {
        const compactedIri = prefixes.compactIri(node.value);
        if (value) {
            value.writeUInt16LE(compactedIri.length, valueOffset);
        }
        return compactedIri;
    },
};
exports.namedNodeReader = {
    readValueBytes: 2,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, prefixes) {
        const valueLen = value.readUInt16LE(valueOffset);
        this.readKeyChars = valueLen;
        return factory.namedNode(prefixes.expandTerm(utils_1.sliceString(key, keyOffset, valueLen)));
    },
};
exports.blankNodeWriter = {
    writtenValueBytes: 2,
    write(value, valueOffset, node) {
        if (value) {
            value.writeUInt16LE(node.value.length, valueOffset);
        }
        return node.value;
    },
};
exports.blankNodeReader = {
    readValueBytes: 2,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory) {
        const valueLen = value.readUInt16LE(valueOffset);
        this.readKeyChars = valueLen;
        return factory.blankNode(utils_1.sliceString(key, keyOffset, valueLen));
    },
};
exports.genericLiteralWriter = {
    writtenValueBytes: 4,
    write(value, valueOffset, node, separator) {
        if (value) {
            value.writeUInt16LE(node.value.length, valueOffset);
            value.writeUInt16LE(node.datatype.value.length, valueOffset + 2);
        }
        return node.datatype.value + separator + node.value;
    },
};
exports.genericLiteralReader = {
    readValueBytes: 4,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value.readUInt16LE(valueOffset);
        const datatypeValueLen = value.readUInt16LE(valueOffset + 2);
        this.readKeyChars = valueLen + datatypeValueLen + separator.length;
        return factory.literal(utils_1.sliceString(key, keyOffset + datatypeValueLen + separator.length, valueLen), factory.namedNode(utils_1.sliceString(key, keyOffset, datatypeValueLen)));
    },
};
exports.stringLiteralWriter = {
    writtenValueBytes: 2,
    write(value, valueOffset, node) {
        if (value) {
            value.writeUInt16LE(node.value.length, valueOffset);
        }
        return node.value;
    },
};
exports.stringLiteralReader = {
    readValueBytes: 2,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory) {
        const valueLen = value.readUInt16LE(valueOffset);
        this.readKeyChars = valueLen;
        return factory.literal(utils_1.sliceString(key, keyOffset, valueLen));
    },
};
exports.langStringLiteralWriter = {
    writtenValueBytes: 4,
    write(value, valueOffset, node, separator) {
        if (value) {
            value.writeUInt16LE(node.value.length, valueOffset);
            value.writeUInt16LE(node.language.length, valueOffset + 2);
        }
        return node.language + separator + node.value;
    },
};
exports.langStringLiteralReader = {
    readValueBytes: 4,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value.readUInt16LE(valueOffset);
        const langCodeLen = value.readUInt16LE(valueOffset + 2);
        this.readKeyChars = valueLen + langCodeLen + separator.length;
        return factory.literal(utils_1.sliceString(key, keyOffset + langCodeLen + separator.length, valueLen), utils_1.sliceString(key, keyOffset, langCodeLen));
    },
};
exports.numericLiteralWriter = {
    writtenValueBytes: 6,
    write(value, valueOffset, node, separator, encodedNumericValue, rangeMode) {
        if (value) {
            value.writeUInt16LE(node.value.length, valueOffset);
            value.writeUInt16LE(node.datatype.value.length, valueOffset + 2);
            value.writeUInt16LE(encodedNumericValue.length, valueOffset + 4);
        }
        let ret = encodedNumericValue;
        if (!rangeMode) {
            ret += separator + node.datatype.value + separator + node.value;
        }
        return ret;
    },
};
exports.numericLiteralReader = {
    readValueBytes: 6,
    readKeyChars: 0,
    read(key, keyOffset, value, valueOffset, factory, separator) {
        const valueLen = value.readUInt16LE(valueOffset);
        const datatypeValueLen = value.readUInt16LE(valueOffset + 2);
        const numericValueLen = value.readUInt16LE(valueOffset + 4);
        this.readKeyChars = numericValueLen + datatypeValueLen + valueLen + (separator.length * 2);
        return factory.literal(utils_1.sliceString(key, keyOffset + numericValueLen + separator.length + datatypeValueLen + separator.length, valueLen), factory.namedNode(utils_1.sliceString(key, keyOffset + numericValueLen + separator.length, datatypeValueLen)));
    },
};
exports.defaultGraphWriter = {
    writtenValueBytes: 2,
    write(value, valueOffset, node) {
        if (value) {
            value.writeUInt16LE(2, valueOffset);
        }
        return 'dg';
    },
};
exports.defaultGraphReader = {
    readValueBytes: 2,
    readKeyChars: 2,
    read(key, keyOffset, value, valueOffset, factory) {
        return factory.defaultGraph();
    },
};
//# sourceMappingURL=terms.js.map