/// <reference types="node" />
import type { Prefixes } from '../types';
import type { BlankNode, DataFactory, DefaultGraph, Literal, NamedNode } from 'rdf-js';
export declare const namedNodeWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: NamedNode, prefixes: Prefixes): string;
};
export declare const namedNodeReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory, prefixes: Prefixes): NamedNode;
};
export declare const blankNodeWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: BlankNode): string;
};
export declare const blankNodeReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory): BlankNode;
};
export declare const genericLiteralWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: Literal, separator: string): string;
};
export declare const genericLiteralReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory, separator: string): Literal;
};
export declare const stringLiteralWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: Literal): string;
};
export declare const stringLiteralReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory): Literal;
};
export declare const langStringLiteralWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: Literal, separator: string): string;
};
export declare const langStringLiteralReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory, separator: string): Literal;
};
export declare const numericLiteralWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: Literal, separator: string, encodedNumericValue: string, rangeMode: boolean): string;
};
export declare const numericLiteralReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory, separator: string): Literal;
};
export declare const defaultGraphWriter: {
    writtenValueBytes: number;
    write(value: Buffer | undefined, valueOffset: number | undefined, node: DefaultGraph): string;
};
export declare const defaultGraphReader: {
    readValueBytes: number;
    readKeyChars: number;
    read(key: string, keyOffset: number, value: Buffer, valueOffset: number, factory: DataFactory): DefaultGraph;
};
