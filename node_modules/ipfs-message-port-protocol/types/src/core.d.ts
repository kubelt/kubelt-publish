export function decodeIterable<I, O>({ port }: RemoteIterable<I>, decode: (arg0: I) => O): AsyncIterable<O>;
export function encodeIterable<I, O>(iterable: AsyncIterable<I> | Iterable<I>, encode: (arg0: I, arg1: Set<Transferable>) => O, transfer: Set<Transferable>): RemoteIterable<O>;
export function encodeCallback(callback: Function, transfer: Set<Transferable>): RemoteCallback;
export function decodeCallback<T>({ port }: RemoteCallback): (arg0: T[]) => void | ((arg0: T[], arg1: Set<Transferable>) => void);
export type RemoteIterable<T> = {
    type: 'RemoteIterable';
    port: MessagePort;
};
export type RemoteCallback = {
    type: 'RemoteCallback';
    port: MessagePort;
};
export type RemoteYield<T> = {
    done: false;
    value: T;
    error: void;
};
export type RemoteDone<T> = {
    done: true;
    value: T | void;
    error: void;
};
export type EncodedError = import('./error').EncodedError;
export type RemoteError = {
    done: true;
    value: void;
    error: EncodedError;
};
export type RemoteNext<T> = RemoteYield<T> | RemoteDone<T> | RemoteError;
//# sourceMappingURL=core.d.ts.map